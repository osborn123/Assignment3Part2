DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/Verbosity.java] (9, 62) private final int verbosityLevel = Integer.MIN_VALUE; // TODO You'll need to initialise this elsewhere.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/Verbosity.java] (12, 8) * TODO: constructor
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/Verbosity.java] (21, 8) * TODO: getVerbosityLevel():
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/Verbosity.java] (31, 8) * TODO: isVerbose():DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Verbosity.java] (9, 62) private final int verbosityLevel = Integer.MIN_VALUE; // TODO: Initialise this elsewhere
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Verbosity.java] (12, 8) * TODO: constructor
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Verbosity.java] (21, 8) * TODO: getVerbosityLevel():
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Verbosity.java] (31, 8) * TODO: isVerbose():DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentReader.java] (14, 8) * TODO: Reads the named document file using default settings. Use the
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentReader.java] (26, 8) * TODO: Reads a document using default settings for those not provided.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentReader.java] (38, 8) * TODO: reads a document using the default set of non-word characters.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentReader.java] (49, 9) /** TODO read the file specified in the configuration and obey theDocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentPG.java] (16, 8) * TODO: default constructor is the parent's constructor. This should be a 
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentPG.java] (23, 8) * TODO: constructor based on a filename. Use the defaults for information
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentPG.java] (32, 8) * TODO: constructor for filename and a pattern specifying characters
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentPG.java] (43, 8) * TODO: constructor using a configuration object. Use the defaults for
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentPG.java] (52, 8) * TODO: constructor using a configuration object and a pattern
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentPG.java] (64, 8) * TODO: Initialise based on a filename. Use the defaults for information
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocumentPG.java] (74, 8) * TODO: constructor using a filename and a pattern specifying charactersDocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (22, 8) * TODO: words and frequencies stored in a data structure of whatever type you want.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (42, 8) * TODO: constructor based on a filename.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (50, 8) * TODO: constructor for filename and a pattern specifying characters
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (60, 8) * TODO: constructor using a configuration object.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (68, 8) * TODO: constructor using a configuration object and a pattern
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (79, 8) * TODO: set or reset the configuration object.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (87, 8) * TODO: Initialise based on a configuration object.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (95, 8) * TODO: initialise based on the filename to read. You must provide
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (104, 8) * TODO: initialise based on the filename to read and a pattern
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (115, 8) * TODO: initialise based on a configuration and a pattern specifying characters
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (126, 8) * TODO: gets the pattern showing the characters that are not allowed in words.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (135, 8) * TODO: sets the pattern of characters that are not allowed in words.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (143, 8) * TODO: readDocument() calls the helper class's method to read a file.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (151, 8) * TODO: getStatsNormalisedWords() returns the statistics of normalised words
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (161, 8) * TODO: getStatsNormalisedWords() returns the statistics of normalised words
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (172, 8) * TODO: printStatsNormalisedWords() prints the statistics of normalised words
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyDocument.java] (179, 8) * TODO: printStatsNormalisedWords() prints the statistics of normalised wordsDocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyReaderConfig.java] (36, 8) * TODO: get the verbosity for the current configuration.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyReaderConfig.java] (45, 8) * TODO: set the verbosity for the current configuration.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/SortingOrder.java] (10, 40) final boolean reversed = false; // TODO: Initialise this elsewhere
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/SortingOrder.java] (13, 8) * TODO: constructor.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/SortingOrder.java] (22, 8) * TODO: isReversed() checks whether the named sort order is reversedDocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/Normaliser.java] (7, 8) * TODO: normalise: returns a standardised copy of a String.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SortingOrder.java] (10, 40) final boolean reversed = false; // TODO: you need to initialise this elsewhere.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SortingOrder.java] (13, 8) * TODO: constructor.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SortingOrder.java] (22, 8) * TODO: isReversed() checks whether the named sort order is reversedDocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/TrollSpeaker.java] (7, 8) * TODO: translateIntoTroll: translates a word into trollishDocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/VowelChecker.java] (7, 8) * TODO: isVowel() checks if a String is one of the five English vowelsDocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/ExampleRunner.java] (97, 8) * TODO: the number of command-line arguments must be acceptable.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/ExampleRunner.java] (133, 8) * TODO: complete filesOK: checks all provided files are ok.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/InformationDocument.java] (37, 8) * TODO: return a short-list of the first N most frequent words (or last N if reversed)
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/InformationDocument.java] (49, 8) * TODO: return a short-list of the first N most frequent words (or last N if reversed)
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/InformationDocument.java] (62, 8) * TODO: return a short-list of the first N most frequent words (or last N if reversed).DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/BasicTextFileReader.java] (15, 8) * TODO: readFile: read all the words of a file.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/AdvancedTextFileReader.java] (16, 8) * TODO: advancedReadFile: read all the words of a file between two specific lines.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (8, 8) // TODO: 01/04/2023 initialise elsewhere
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (11, 29) protected int count; // TODO: 01/04/2023 initialise elsewhere
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (14, 8) * TODO: constructor.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (23, 8) * TODO: getWord() is the getter for the core word.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (32, 8) * TODO: getCount() is the getter for the current word frequency.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (39, 8) * TODO: incrementCount by one.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (45, 8) * TODO: toString generates a one-line String according to the pattern
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (56, 8) * TODO: toString(String) generates a one-line String of the frequency
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/a3algorithms/SimpleFrequencyWord.java] (67, 8) * TODO: compareTo() knows how to compare this object with another of the same type.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Translation.java] (9, 8) // TODO: put the code for translating troll directly inside the overriden method
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Translation.java] (12, 8) /* TODO: translate into British doggie speak. Dogs from different countries
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Translation.java] (47, 8) * TODO: Translates the word component of a {@link FrequencyWord}.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (12, 8) * TODO: Store the set of vowels [a, e, i, o, u] ("y" is not considered a vowel.)
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (16, 50) protected final String normalised = null; // TODO: you'll need to initialise this elsewhere
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (18, 29) protected int count; // TODO: you'll need to initialise this elsewhere
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (21, 8) * TODO: Create constructor.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (29, 8) * TODO: normalise means a word is entirely lowercase and
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (42, 8) * TODO: getter for the normalised form of the current word.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (52, 8) * TODO: getter for the current frequency of the current word.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (61, 8) * TODO: increment the frequency count of the current word by one
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (67, 8) * TODO: gets a String of this object's data (frequency and normalised word-form)
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (78, 8) * TODO: gets a String of this object's data (frequency and normalised word-form)
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/FrequencyWord.java] (89, 8) * TODO: A FrequencyWord knows how to compare itself with another FrequencyWord.DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Runner.java] (92, 8) * TODO: the number of command-line arguments must be acceptable.
DocumentImpl[file://C:/_vm_shared/Inf1B/Assignment3Part2/src/literatureStats/Runner.java] (127, 8) * TODO: complete filesOK: checks all provided files are ok